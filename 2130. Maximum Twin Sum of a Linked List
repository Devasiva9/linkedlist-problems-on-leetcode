Approach
we are going with the approach two pointer in in the linked list

Complexity
Time complexity:
o(n) Time complexity

Space complexity:
O(1) Space complexity

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
    public int pairSum(ListNode head) {
        
        if(head == null && head.next == null)
        {
        
            return 0;
        }
        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        ListNode prev = null, curr = slow;
        while (curr != null) {
            ListNode nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        int maxSum = 0;
        ListNode first = head, second = prev;
        while (second != null) {
            int sum = first.val + second.val;
            maxSum = Math.max(maxSum, sum);
            first = first.next;
            second = second.next;
        }

        return maxSum;
    }
}
